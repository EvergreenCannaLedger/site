{"title":"Black Friday to New Year‚Äôs 2021: A First Look at Sales Behavior in Washington‚Äôs CCRS Era","markdown":{"yaml":{"title":"Black Friday to New Year‚Äôs 2021: A First Look at Sales Behavior in Washington‚Äôs CCRS Era","format":"html","editor":"visual"},"headingText":"Run it","containsRefs":false,"markdown":"\n\n```{r, echo=FALSE, message=FALSE, warning=FALSE}\n\nlibrary(tidyverse)\nlibrary(arrow)\nlibrary(DBI)\nlibrary(duckdb)\nlibrary(fs)\nlibrary(lubridate)\nlibrary(scales)\n\nbase_dir <- \"C:/Users/theob/OneDrive/Documents/parquet_cannabis_master/arrow\"\nduckdb_path <- file.path(dirname(base_dir), \"duckdb_master.duckdb\")\n\ncon <- dbConnect(duckdb::duckdb(), dbdir = duckdb_path, read_only = FALSE)\n\nregister_master_parquet <- function(con, base_dir) {\n  master_files <- list.files(base_dir, pattern = \"\\\\.parquet$\", full.names = TRUE)\n\n  table_names <- tools::file_path_sans_ext(basename(master_files)) %>%\n    str_replace_all(\"([a-z])([A-Z])\", \"\\\\1_\\\\2\") %>%\n    str_replace_all(\"[^[:alnum:]_]\", \"_\") %>%\n    str_to_lower()\n\n  walk2(table_names, master_files, ~ {\n    table_name <- paste0(.x, \"_master\")\n    if (table_name %in% duckdb_list_arrow(con)) {\n      duckdb_unregister_arrow(con, table_name)\n      message(\"üßπ Unregistered master: \", table_name)\n    }\n\n    dataset <- arrow::open_dataset(.y)\n    duckdb_register_arrow(con, table_name, dataset)\n    message(\"üì¶ Registered master: \", table_name)\n  })\n}\n\nregister_master_parquet(con, base_dir)\n```\n\n```{r, echo=FALSE, message=FALSE, warning=FALSE}\ncreate_combined_view <- function(con, base_name) {\n  tables <- duckdb_list_arrow(con)\n  relevant_tables <- tables[str_detect(tables, paste0(\"^\", base_name, \"_(master|arrow_.*2025)\"))]\n\n  if (length(relevant_tables) == 0) {\n    message(\"‚ö†Ô∏è No tables found for \", base_name)\n    return(invisible(NULL))\n  }\n\n  # Get Arrow schema columns for each table\n  column_lists <- map(relevant_tables, ~ {\n  cols <- names(dbGetQuery(con, glue::glue(\"SELECT * FROM \\\"{.x}\\\" LIMIT 0\")))\n  tibble(table = .x, column = cols)\n}) %>% bind_rows()\n\n  # Keep only columns common to all tables\n  common_columns <- column_lists %>%\n    group_by(column) %>%\n    summarise(n_tables = n_distinct(table), .groups = \"drop\") %>%\n    filter(n_tables == length(relevant_tables)) %>%\n    pull(column)\n\n  if (length(common_columns) == 0) {\n    message(\"‚ùå No common columns found across tables for \", base_name)\n    return(invisible(NULL))\n  }\n\n  # (Optional) Log any dropped columns\n  all_cols <- column_lists %>% distinct(column)\n  dropped_cols <- setdiff(all_cols$column, common_columns)\n  if (length(dropped_cols)) {\n    message(\"‚ö†Ô∏è Dropping columns not in all tables for \", base_name, \": \", paste(dropped_cols, collapse = \", \"))\n  }\n\n  # Build UNION ALL\n  union_parts <- map_chr(relevant_tables, ~ {\n    cols <- paste(common_columns, collapse = \", \")\n    glue::glue(\"SELECT {cols} FROM \\\"{.x}\\\"\")  # quote in case of special chars\n  })\n\n  union_sql <- glue::glue(\"\n    CREATE OR REPLACE VIEW {base_name}_all AS\n    {paste(union_parts, collapse = '\\nUNION ALL\\n')}\n  \")\n\n  dbExecute(con, union_sql)\n  message(\"‚úÖ Created view: \", base_name, \"_all with \", length(relevant_tables), \" parts.\")\n}\n\nviews_to_create <- c(\"sales_detail\", \"sale_header\", \"inventory\", \"product\", \"licensee\")\n\nwalk(views_to_create, ~ create_combined_view(con, .x))\n\n\n```\n\n```{r, echo=FALSE, message=FALSE, warning=FALSE}\n\nsales_blackfriday_xmas_nye_2021 <- dbGetQuery(con, \"\n  SELECT\n    sd.SaleDetailId,\n    sh.LicenseeId,\n    lic.DBA AS BusinessName,\n    sh.SaleDate,\n    CAST(sd.Quantity AS DOUBLE) AS Quantity,\n    CAST(sd.UnitPrice AS DOUBLE) AS UnitPrice,\n    CAST(sd.SalesTax AS DOUBLE) AS SalesTax,\n    CAST(sd.OtherTax AS DOUBLE) AS OtherTax,\n    CAST(sd.Discount AS DOUBLE) AS Discount,\n    \n    prod.Name AS ProductName,\n    prod.Description AS ProductDescription,\n    prod.InventoryType,\n    prod.UnitWeightGrams,\n    \n    (CAST(sd.Quantity AS DOUBLE) * CAST(sd.UnitPrice AS DOUBLE)\n     + CAST(sd.SalesTax AS DOUBLE)\n     + CAST(sd.OtherTax AS DOUBLE)) AS Revenue\n\n  FROM sales_detail_all sd\n  LEFT JOIN sale_header_all sh ON sd.SaleHeaderId = sh.SaleHeaderId\n  LEFT JOIN licensee_all lic    ON sh.LicenseeId = lic.LicenseeId\n  LEFT JOIN inventory_all inv   ON sd.InventoryId = inv.InventoryId\n  LEFT JOIN product_all prod    ON inv.ProductId = prod.ProductId\n\n  WHERE sh.SaleDate BETWEEN '2021-11-24' AND '2021-12-31'\n    AND CAST(sd.UnitPrice AS DOUBLE) < 2\n\")\n\n```\n\nTop Product Types by Revenue\n\n```{r, echo=FALSE, message=FALSE, warning=FALSE}\n\n\nsales_blackfriday_xmas_nye_2021 %>%\n  group_by(InventoryType) %>%\n  summarise(\n    TotalRevenue = sum(Revenue, na.rm = TRUE),\n    UnitsSold = sum(Quantity, na.rm = TRUE),\n    .groups = \"drop\"\n  ) %>%\n  arrange(desc(TotalRevenue)) %>%\n  ggplot(aes(x = reorder(InventoryType, TotalRevenue), y = TotalRevenue)) +\n  geom_col(fill = \"steelblue\") +\n  coord_flip() +\n  scale_y_continuous(labels = dollar_format()) +\n  labs(\n    title = \"üí∞ Revenue by Product Type (Black Friday - NYE 2021)\",\n    x = \"Product Type\",\n    y = \"Total Revenue\"\n  ) +\n  theme_minimal()\n\n\n```\n\nRevenue vs Units Sold by Type See if some product types sell lots of units but earn less (or vice versa):\n\n```{r, echo=FALSE, message=FALSE, warning=FALSE}\n\nsales_blackfriday_xmas_nye_2021 %>%\n  group_by(InventoryType) %>%\n  summarise(\n    TotalRevenue = sum(Revenue, na.rm = TRUE),\n    TotalUnits = sum(Quantity, na.rm = TRUE),\n    .groups = \"drop\"\n  ) %>%\n  ggplot(aes(x = TotalUnits, y = TotalRevenue, label = InventoryType)) +\n  geom_point(color = \"darkgreen\", size = 4) +\n  geom_text(nudge_y = 5, check_overlap = TRUE) +\n  scale_y_continuous(labels = dollar_format()) +\n  labs(\n    title = \"üì¶ Units Sold vs Revenue by Product Type\",\n    x = \"Units Sold\",\n    y = \"Revenue\"\n  ) +\n  theme_minimal()\n\n\n```\n\nDaily Sales Trend by Product Type\n\n```{r, echo=FALSE, message=FALSE, warning=FALSE}\n\n\nsales_blackfriday_xmas_nye_2021 %>%\n  mutate(SaleDate = as.Date(SaleDate)) %>%\n  group_by(SaleDate, InventoryType) %>%\n  summarise(DailyRevenue = sum(Revenue, na.rm = TRUE), .groups = \"drop\") %>%\n  ggplot(aes(x = SaleDate, y = DailyRevenue, color = InventoryType)) +\n  geom_line(size = 1) +\n  scale_y_continuous(labels = dollar_format()) +\n  labs(\n    title = \"üìà Daily Revenue Trend by Product Type\",\n    x = \"Date\",\n    y = \"Revenue\"\n  ) +\n  theme_minimal()\n\n\n```\n\nGroup by BusinessName and InventoryType This answers questions like: Who sold the most usable cannabis? Which stores had the most revenue from pre-rolls?\n\n```{r, echo=FALSE, message=FALSE, warning=FALSE}\n\nsales_blackfriday_xmas_nye_2021 %>%\n  filter(Revenue > 0) %>%\n  group_by(BusinessName, InventoryType) %>%\n  summarise(\n    TotalRevenue = sum(Revenue, na.rm = TRUE),\n    TotalUnits = sum(Quantity, na.rm = TRUE),\n    .groups = \"drop\"\n  ) %>%\n  arrange(desc(TotalRevenue)) %>%\n  ggplot(aes(x = reorder(BusinessName, TotalRevenue), y = TotalRevenue, fill = InventoryType)) +\n  geom_col() +\n  coord_flip() +\n  scale_y_continuous(labels = dollar_format()) +\n  labs(\n    title = \"üí∞ Revenue by Product Type and Business\",\n    x = \"Retailer\",\n    y = \"Revenue\"\n  ) +\n  theme_minimal()\n\n```\n\nNormalize Revenue by UnitWeightGrams This gives you revenue per gram ‚Äî useful for comparing product efficiency, price compression, or margin trends.\n\n```{r, echo=FALSE, message=FALSE, warning=FALSE}\n\nsales_blackfriday_xmas_nye_2021 %>%\n  filter(Revenue > 0) %>%\n  mutate(UnitWeightGrams = as.numeric(UnitWeightGrams)) %>%\n  filter(!is.na(UnitWeightGrams), UnitWeightGrams > 0) %>%\n  mutate(RevenuePerGram = Revenue / UnitWeightGrams) %>%\n  group_by(InventoryType) %>%\n  summarise(\n    AvgRevenuePerGram = mean(RevenuePerGram, na.rm = TRUE),\n    MedianRevenuePerGram = median(RevenuePerGram, na.rm = TRUE),\n    .groups = \"drop\"\n  ) %>%\n  ggplot(aes(x = reorder(InventoryType, AvgRevenuePerGram), y = AvgRevenuePerGram)) +\n  geom_col(fill = \"darkorange\") +\n  coord_flip() +\n  scale_y_continuous(labels = dollar_format()) +\n  labs(\n    title = \"‚öñÔ∏è Avg Revenue per Gram by Product Type\",\n    x = \"Product Type\",\n    y = \"Revenue per Gram ($)\"\n  ) +\n  theme_minimal()\n\n```\n\nAnalyze Discount Behavior by Product Type This identifies which products get discounted most ‚Äî helps you spot pricing pressure, clearance items, or strategic promotions.\n\n```{r, echo=FALSE, message=FALSE, warning=FALSE}\n\nsales_blackfriday_xmas_nye_2021 %>%\n  filter(Revenue > 0) %>%\n  group_by(InventoryType) %>%\n  summarise(\n    AvgDiscount = mean(Discount, na.rm = TRUE),\n    MedianDiscount = median(Discount, na.rm = TRUE),\n    PercentDiscounted = mean(Discount > 0) * 100,\n    .groups = \"drop\"\n  ) %>%\n  ggplot(aes(x = reorder(InventoryType, AvgDiscount), y = AvgDiscount)) +\n  geom_col(fill = \"purple\") +\n  coord_flip() +\n  labs(\n    title = \"üí∏ Average Discount by Product Type\",\n    x = \"Product Type\",\n    y = \"Avg Discount ($)\"\n  ) +\n  theme_minimal()\n\n\n```\n\nGoal 2: Compute Total Revenue per Licensee This answers: Who made the most money during Black Friday ‚Üí New Year‚Äôs Eve 2021?\n\n```{r, message=FALSE, warning=FALSE}\n\n\n# Clean and prepare the dataset\nsales_licensee_summary <- sales_blackfriday_xmas_nye_2021 %>%\n  filter(Revenue > 0) %>%\n  group_by(LicenseeId, BusinessName) %>%\n  summarise(\n    TotalRevenue = sum(Revenue, na.rm = TRUE),\n    Transactions = n(),\n    .groups = \"drop\"\n  ) %>%\n  arrange(desc(TotalRevenue))\n\n# View the number of unique licensees\nn_licensees <- n_distinct(sales_licensee_summary$LicenseeId)\ncat(\"‚úÖ Number of unique licensees:\", n_licensees, \"\\n\")\n\nlibrary(kableExtra)\nkable(sales_licensee_summary)\n\n```\n\nWhen Washington‚Äôs **Cannabis Central Reporting System (CCRS)** went live in December 2021, the transition marked the first statewide attempt to standardize traceability after BioTrack‚Äôs phase-out. To understand how licensees were performing during those pivotal early weeks, we analyzed nearly **12 thousand transactions** covering the **Black Friday‚ÄìChristmas‚ÄìNew Year‚Äôs 2021** period.\n\nThe dataset captures point-of-sale activity reported by a handful of early CCRS adopters‚Äîprimarily the Lucid retail group and Green Lady Lacey‚Äîand offers a snapshot of how products, pricing, and discounting behaved across inventory types.\n","srcMarkdownNoYaml":"\n\n```{r, echo=FALSE, message=FALSE, warning=FALSE}\n\nlibrary(tidyverse)\nlibrary(arrow)\nlibrary(DBI)\nlibrary(duckdb)\nlibrary(fs)\nlibrary(lubridate)\nlibrary(scales)\n\nbase_dir <- \"C:/Users/theob/OneDrive/Documents/parquet_cannabis_master/arrow\"\nduckdb_path <- file.path(dirname(base_dir), \"duckdb_master.duckdb\")\n\ncon <- dbConnect(duckdb::duckdb(), dbdir = duckdb_path, read_only = FALSE)\n\nregister_master_parquet <- function(con, base_dir) {\n  master_files <- list.files(base_dir, pattern = \"\\\\.parquet$\", full.names = TRUE)\n\n  table_names <- tools::file_path_sans_ext(basename(master_files)) %>%\n    str_replace_all(\"([a-z])([A-Z])\", \"\\\\1_\\\\2\") %>%\n    str_replace_all(\"[^[:alnum:]_]\", \"_\") %>%\n    str_to_lower()\n\n  walk2(table_names, master_files, ~ {\n    table_name <- paste0(.x, \"_master\")\n    if (table_name %in% duckdb_list_arrow(con)) {\n      duckdb_unregister_arrow(con, table_name)\n      message(\"üßπ Unregistered master: \", table_name)\n    }\n\n    dataset <- arrow::open_dataset(.y)\n    duckdb_register_arrow(con, table_name, dataset)\n    message(\"üì¶ Registered master: \", table_name)\n  })\n}\n\n# Run it\nregister_master_parquet(con, base_dir)\n```\n\n```{r, echo=FALSE, message=FALSE, warning=FALSE}\ncreate_combined_view <- function(con, base_name) {\n  tables <- duckdb_list_arrow(con)\n  relevant_tables <- tables[str_detect(tables, paste0(\"^\", base_name, \"_(master|arrow_.*2025)\"))]\n\n  if (length(relevant_tables) == 0) {\n    message(\"‚ö†Ô∏è No tables found for \", base_name)\n    return(invisible(NULL))\n  }\n\n  # Get Arrow schema columns for each table\n  column_lists <- map(relevant_tables, ~ {\n  cols <- names(dbGetQuery(con, glue::glue(\"SELECT * FROM \\\"{.x}\\\" LIMIT 0\")))\n  tibble(table = .x, column = cols)\n}) %>% bind_rows()\n\n  # Keep only columns common to all tables\n  common_columns <- column_lists %>%\n    group_by(column) %>%\n    summarise(n_tables = n_distinct(table), .groups = \"drop\") %>%\n    filter(n_tables == length(relevant_tables)) %>%\n    pull(column)\n\n  if (length(common_columns) == 0) {\n    message(\"‚ùå No common columns found across tables for \", base_name)\n    return(invisible(NULL))\n  }\n\n  # (Optional) Log any dropped columns\n  all_cols <- column_lists %>% distinct(column)\n  dropped_cols <- setdiff(all_cols$column, common_columns)\n  if (length(dropped_cols)) {\n    message(\"‚ö†Ô∏è Dropping columns not in all tables for \", base_name, \": \", paste(dropped_cols, collapse = \", \"))\n  }\n\n  # Build UNION ALL\n  union_parts <- map_chr(relevant_tables, ~ {\n    cols <- paste(common_columns, collapse = \", \")\n    glue::glue(\"SELECT {cols} FROM \\\"{.x}\\\"\")  # quote in case of special chars\n  })\n\n  union_sql <- glue::glue(\"\n    CREATE OR REPLACE VIEW {base_name}_all AS\n    {paste(union_parts, collapse = '\\nUNION ALL\\n')}\n  \")\n\n  dbExecute(con, union_sql)\n  message(\"‚úÖ Created view: \", base_name, \"_all with \", length(relevant_tables), \" parts.\")\n}\n\nviews_to_create <- c(\"sales_detail\", \"sale_header\", \"inventory\", \"product\", \"licensee\")\n\nwalk(views_to_create, ~ create_combined_view(con, .x))\n\n\n```\n\n```{r, echo=FALSE, message=FALSE, warning=FALSE}\n\nsales_blackfriday_xmas_nye_2021 <- dbGetQuery(con, \"\n  SELECT\n    sd.SaleDetailId,\n    sh.LicenseeId,\n    lic.DBA AS BusinessName,\n    sh.SaleDate,\n    CAST(sd.Quantity AS DOUBLE) AS Quantity,\n    CAST(sd.UnitPrice AS DOUBLE) AS UnitPrice,\n    CAST(sd.SalesTax AS DOUBLE) AS SalesTax,\n    CAST(sd.OtherTax AS DOUBLE) AS OtherTax,\n    CAST(sd.Discount AS DOUBLE) AS Discount,\n    \n    prod.Name AS ProductName,\n    prod.Description AS ProductDescription,\n    prod.InventoryType,\n    prod.UnitWeightGrams,\n    \n    (CAST(sd.Quantity AS DOUBLE) * CAST(sd.UnitPrice AS DOUBLE)\n     + CAST(sd.SalesTax AS DOUBLE)\n     + CAST(sd.OtherTax AS DOUBLE)) AS Revenue\n\n  FROM sales_detail_all sd\n  LEFT JOIN sale_header_all sh ON sd.SaleHeaderId = sh.SaleHeaderId\n  LEFT JOIN licensee_all lic    ON sh.LicenseeId = lic.LicenseeId\n  LEFT JOIN inventory_all inv   ON sd.InventoryId = inv.InventoryId\n  LEFT JOIN product_all prod    ON inv.ProductId = prod.ProductId\n\n  WHERE sh.SaleDate BETWEEN '2021-11-24' AND '2021-12-31'\n    AND CAST(sd.UnitPrice AS DOUBLE) < 2\n\")\n\n```\n\nTop Product Types by Revenue\n\n```{r, echo=FALSE, message=FALSE, warning=FALSE}\n\n\nsales_blackfriday_xmas_nye_2021 %>%\n  group_by(InventoryType) %>%\n  summarise(\n    TotalRevenue = sum(Revenue, na.rm = TRUE),\n    UnitsSold = sum(Quantity, na.rm = TRUE),\n    .groups = \"drop\"\n  ) %>%\n  arrange(desc(TotalRevenue)) %>%\n  ggplot(aes(x = reorder(InventoryType, TotalRevenue), y = TotalRevenue)) +\n  geom_col(fill = \"steelblue\") +\n  coord_flip() +\n  scale_y_continuous(labels = dollar_format()) +\n  labs(\n    title = \"üí∞ Revenue by Product Type (Black Friday - NYE 2021)\",\n    x = \"Product Type\",\n    y = \"Total Revenue\"\n  ) +\n  theme_minimal()\n\n\n```\n\nRevenue vs Units Sold by Type See if some product types sell lots of units but earn less (or vice versa):\n\n```{r, echo=FALSE, message=FALSE, warning=FALSE}\n\nsales_blackfriday_xmas_nye_2021 %>%\n  group_by(InventoryType) %>%\n  summarise(\n    TotalRevenue = sum(Revenue, na.rm = TRUE),\n    TotalUnits = sum(Quantity, na.rm = TRUE),\n    .groups = \"drop\"\n  ) %>%\n  ggplot(aes(x = TotalUnits, y = TotalRevenue, label = InventoryType)) +\n  geom_point(color = \"darkgreen\", size = 4) +\n  geom_text(nudge_y = 5, check_overlap = TRUE) +\n  scale_y_continuous(labels = dollar_format()) +\n  labs(\n    title = \"üì¶ Units Sold vs Revenue by Product Type\",\n    x = \"Units Sold\",\n    y = \"Revenue\"\n  ) +\n  theme_minimal()\n\n\n```\n\nDaily Sales Trend by Product Type\n\n```{r, echo=FALSE, message=FALSE, warning=FALSE}\n\n\nsales_blackfriday_xmas_nye_2021 %>%\n  mutate(SaleDate = as.Date(SaleDate)) %>%\n  group_by(SaleDate, InventoryType) %>%\n  summarise(DailyRevenue = sum(Revenue, na.rm = TRUE), .groups = \"drop\") %>%\n  ggplot(aes(x = SaleDate, y = DailyRevenue, color = InventoryType)) +\n  geom_line(size = 1) +\n  scale_y_continuous(labels = dollar_format()) +\n  labs(\n    title = \"üìà Daily Revenue Trend by Product Type\",\n    x = \"Date\",\n    y = \"Revenue\"\n  ) +\n  theme_minimal()\n\n\n```\n\nGroup by BusinessName and InventoryType This answers questions like: Who sold the most usable cannabis? Which stores had the most revenue from pre-rolls?\n\n```{r, echo=FALSE, message=FALSE, warning=FALSE}\n\nsales_blackfriday_xmas_nye_2021 %>%\n  filter(Revenue > 0) %>%\n  group_by(BusinessName, InventoryType) %>%\n  summarise(\n    TotalRevenue = sum(Revenue, na.rm = TRUE),\n    TotalUnits = sum(Quantity, na.rm = TRUE),\n    .groups = \"drop\"\n  ) %>%\n  arrange(desc(TotalRevenue)) %>%\n  ggplot(aes(x = reorder(BusinessName, TotalRevenue), y = TotalRevenue, fill = InventoryType)) +\n  geom_col() +\n  coord_flip() +\n  scale_y_continuous(labels = dollar_format()) +\n  labs(\n    title = \"üí∞ Revenue by Product Type and Business\",\n    x = \"Retailer\",\n    y = \"Revenue\"\n  ) +\n  theme_minimal()\n\n```\n\nNormalize Revenue by UnitWeightGrams This gives you revenue per gram ‚Äî useful for comparing product efficiency, price compression, or margin trends.\n\n```{r, echo=FALSE, message=FALSE, warning=FALSE}\n\nsales_blackfriday_xmas_nye_2021 %>%\n  filter(Revenue > 0) %>%\n  mutate(UnitWeightGrams = as.numeric(UnitWeightGrams)) %>%\n  filter(!is.na(UnitWeightGrams), UnitWeightGrams > 0) %>%\n  mutate(RevenuePerGram = Revenue / UnitWeightGrams) %>%\n  group_by(InventoryType) %>%\n  summarise(\n    AvgRevenuePerGram = mean(RevenuePerGram, na.rm = TRUE),\n    MedianRevenuePerGram = median(RevenuePerGram, na.rm = TRUE),\n    .groups = \"drop\"\n  ) %>%\n  ggplot(aes(x = reorder(InventoryType, AvgRevenuePerGram), y = AvgRevenuePerGram)) +\n  geom_col(fill = \"darkorange\") +\n  coord_flip() +\n  scale_y_continuous(labels = dollar_format()) +\n  labs(\n    title = \"‚öñÔ∏è Avg Revenue per Gram by Product Type\",\n    x = \"Product Type\",\n    y = \"Revenue per Gram ($)\"\n  ) +\n  theme_minimal()\n\n```\n\nAnalyze Discount Behavior by Product Type This identifies which products get discounted most ‚Äî helps you spot pricing pressure, clearance items, or strategic promotions.\n\n```{r, echo=FALSE, message=FALSE, warning=FALSE}\n\nsales_blackfriday_xmas_nye_2021 %>%\n  filter(Revenue > 0) %>%\n  group_by(InventoryType) %>%\n  summarise(\n    AvgDiscount = mean(Discount, na.rm = TRUE),\n    MedianDiscount = median(Discount, na.rm = TRUE),\n    PercentDiscounted = mean(Discount > 0) * 100,\n    .groups = \"drop\"\n  ) %>%\n  ggplot(aes(x = reorder(InventoryType, AvgDiscount), y = AvgDiscount)) +\n  geom_col(fill = \"purple\") +\n  coord_flip() +\n  labs(\n    title = \"üí∏ Average Discount by Product Type\",\n    x = \"Product Type\",\n    y = \"Avg Discount ($)\"\n  ) +\n  theme_minimal()\n\n\n```\n\nGoal 2: Compute Total Revenue per Licensee This answers: Who made the most money during Black Friday ‚Üí New Year‚Äôs Eve 2021?\n\n```{r, message=FALSE, warning=FALSE}\n\n\n# Clean and prepare the dataset\nsales_licensee_summary <- sales_blackfriday_xmas_nye_2021 %>%\n  filter(Revenue > 0) %>%\n  group_by(LicenseeId, BusinessName) %>%\n  summarise(\n    TotalRevenue = sum(Revenue, na.rm = TRUE),\n    Transactions = n(),\n    .groups = \"drop\"\n  ) %>%\n  arrange(desc(TotalRevenue))\n\n# View the number of unique licensees\nn_licensees <- n_distinct(sales_licensee_summary$LicenseeId)\ncat(\"‚úÖ Number of unique licensees:\", n_licensees, \"\\n\")\n\nlibrary(kableExtra)\nkable(sales_licensee_summary)\n\n```\n\nWhen Washington‚Äôs **Cannabis Central Reporting System (CCRS)** went live in December 2021, the transition marked the first statewide attempt to standardize traceability after BioTrack‚Äôs phase-out. To understand how licensees were performing during those pivotal early weeks, we analyzed nearly **12 thousand transactions** covering the **Black Friday‚ÄìChristmas‚ÄìNew Year‚Äôs 2021** period.\n\nThe dataset captures point-of-sale activity reported by a handful of early CCRS adopters‚Äîprimarily the Lucid retail group and Green Lady Lacey‚Äîand offers a snapshot of how products, pricing, and discounting behaved across inventory types.\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["assets/css/custom.css"],"output-file":"2022-01-31_BlkFri_to_NYE_2021_Plots.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.6.42","theme":"flatly","title":"Black Friday to New Year‚Äôs 2021: A First Look at Sales Behavior in Washington‚Äôs CCRS Era","editor":"visual"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}